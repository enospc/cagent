use crate::constants::*;

pub fn show_help() {
    println!("{GREEN}=== Caged Agent (cagent) - Security Container Manager ==={NC}");
    println!();
    println!(
        "A security-hardened container manager that creates isolated systemd-nspawn containers"
    );
    println!("with X11 forwarding, audio support, and configurable security modes for running");
    println!("GUI applications in a controlled environment.");
    println!();
    println!("{YELLOW}USAGE:{NC}");
    println!("    cage-agent [OPTIONS]");
    println!();
    println!("{YELLOW}OPTIONS:{NC}");
    println!("    -h, --help       Show this help message and exit");
    println!("    -v, --verbose    Enable verbose command logging to terminal");
    println!();
    println!("{YELLOW}ENVIRONMENT VARIABLES:{NC}");
    println!("    SECURITY_MODE    Container security level (default: high)");
    println!("                     • high   - Maximum isolation, no network, no audio");
    println!("                     • medium - Balanced security with audio support");
    println!("                     • low    - Relaxed security for development");
    println!();
    println!("    DEBUG_MODE       Enable debug output (set to '1' to enable)");
    println!("    HOST_DIR         Host directory to bind mount (default: $HOME)");
    println!();
    println!("{YELLOW}EXAMPLES:{NC}");
    println!("    # Run with high security (default)");
    println!("    cage-agent");
    println!();
    println!("    # Run with medium security and audio support");
    println!("    SECURITY_MODE=medium cage-agent");
    println!();
    println!("    # Run with verbose command logging");
    println!("    cage-agent -v");
    println!();
    println!("    # Run with debug mode and custom host directory");
    println!("    DEBUG_MODE=1 HOST_DIR=/path/to/dir cage-agent -v");
    println!();
    println!("{YELLOW}SECURITY LEVELS:{NC}");
    println!("    {CYAN}High Security (default):{NC}");
    println!("    • No network access");
    println!("    • No audio support");
    println!("    • Maximum process isolation");
    println!("    • Read-only bind mounts");
    println!("    • Restricted capabilities");
    println!();
    println!("    {CYAN}Medium Security:{NC}");
    println!("    • Limited network access");
    println!("    • Audio support enabled");
    println!("    • Moderate process isolation");
    println!("    • Read-only bind mounts");
    println!();
    println!("    {CYAN}Low Security:{NC}");
    println!("    • Full network access");
    println!("    • Audio support enabled");
    println!("    • Basic process isolation");
    println!("    • Development-friendly settings");
    println!();
    println!("{YELLOW}CONTAINER FEATURES:{NC}");
    println!("    • Arch Linux base system");
    println!("    • X11 forwarding for GUI applications");
    println!("    • Audio support (medium/low security only)");
    println!("    • Bind-mounted home directory access");
    println!("    • Temporary workspace with size limits");
    println!("    • Package management via sudo pacman");
    println!("    • Container integrity verification");
    println!();
    println!("{YELLOW}CONTAINER USAGE:{NC}");
    println!("    {CYAN}Exiting the Container:{NC}");
    println!("    • Type 'exit' or press Ctrl+D to leave container safely");
    println!("    • Press Ctrl+C then type 'exit' for emergency exit");
    println!("    • Container will shutdown and return to host system");
    println!();
    println!("    {CYAN}Inside the Container:{NC}");
    println!("    • Run './container-help.sh' for detailed help and status");
    println!("    • Run './fix-audio.sh' to diagnose audio issues");
    println!("    • Use 'sudo pacman -S <package>' to install software");
    println!("    • Access ~/downloads and ~/documents (read-only from host)");
    println!("    • Use ~/work directory for temporary files (2GB limit)");
    println!();
    println!("{YELLOW}FILES AND DIRECTORIES:{NC}");
    println!("    ~/.config/cagent/container/    Container root filesystem");
    println!("    ~/.config/cagent/cache/        Downloaded packages cache");
    println!("    ~/.config/cagent/logs/         Application log files");
    println!();
    println!("{YELLOW}REQUIREMENTS:{NC}");
    println!("    • Ubuntu/Debian host system");
    println!("    • systemd with systemd-nspawn");
    println!("    • X11 display server");
    println!("    • sudo privileges for container management");
    println!();
    println!("{YELLOW}TROUBLESHOOTING:{NC}");
    println!("    • Use DEBUG_MODE=1 for detailed debug output");
    println!("    • Use -v flag to see all executed commands");
    println!("    • Check log files in ~/.config/cagent/logs/");
    println!("    • Ensure ulimit -u is at least 10000 for systemd 254+");
    println!();
    println!("For more information, see the project documentation.");
}
